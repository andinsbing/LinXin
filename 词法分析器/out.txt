#
include
<
iostream
>
#
include
<
algorithm
>
#
include
<
fstream
>
#
include
<
string
>
#
include
<
map
>
#
include
<
cctype
>
#
include
<
unordered_set
>
#
include
<
vector
>
using
std
:
:
cin
;
using
std
:
:
cout
;
using
std
:
:
endl
;
class
Token
{
public
:
enum
Type
{
KEYWORDS
,
OP
,
SEPARATOR
,
CONSTANT
,
ID
}
;
public
:
Token
(
const
std
:
:
string
&
sybol
,
Type
type
)
:
symbol
(
symbol
)
,
type
(
type
)
{
}
const
std
:
:
string
symbol
;
const
Type
type
;
}
;
class
ID
:
public
Token
{
}
;
class
OpBase
:
public
Token
{
}
;
std
:
:
unordered_set
<
std
:
:
string
>
keywords
{
{
"
char
"
,
"
int
"
,
"
true
"
,
"
false
"
,
"
for
"
,
"
if
"
,
"
else
"
,
"
return
"
,
"
break
"
,
"
continue
"
,
"
do
"
,
"
while
"
,
"
inline
"
,
"
eunm
"
}
}
;
std
:
:
unordered_set
<
std
:
:
string
>
op
{
{
"
+
"
,
"
-
"
,
"
*
"
,
"
/
"
,
"
%
"
,
"
+
+
"
,
"
-
-
"
,
"
!
"
,
"
=
"
,
"
=
=
"
,
"
!
=
"
,
"
|
"
,
"
|
|
"
,
"
&
"
,
"
&
&
"
,
"
^
"
,
"
new
"
,
"
delete
"
}
}
;
std
:
:
unordered_set
<
std
:
:
string
>
separator
{
{
"
;
"
,
"
,
"
,
"
{
"
,
"
}
"
,
"
(
"
,
"
)
"
}
}
;
class
Scanner
{
public
:
void
scan
(
const
std
:
:
string
&
source
,
const
std
:
:
string
&
outFileRoot
)
{
init
(
source
,
outFileRoot
)
;
if
(
!
isFileStreamAviliable
(
)
)
{
closeFileStream
(
)
;
cout
<
<
"
can
not
open
file
\
n
"
<
<
endl
;
return
;
}
char
ch
=
peek
(
)
;
while
(
ch
!
=
EOF
)
{
if
(
std
:
:
isspace
(
ch
)
)
{
drop
(
)
;
}
else
if
(
std
:
:
ispunct
(
ch
)
)
{
drop
(
)
;
tokens
.
push_back
(
{
ch
}
)
;
}
else
if
(
std
:
:
isalpha
(
ch
)
)
{
std
:
:
string
temp
;
while
(
std
:
:
isalnum
(
ch
)
)
{
temp
.
push_back
(
ch
)
;
drop
(
)
;
ch
=
peek
(
)
;
}
tokens
.
push_back
(
std
:
:
move
(
temp
)
)
;
}
else
if
(
std
:
:
isdigit
(
ch
)
)
{
std
:
:
string
temp
;
while
(
std
:
:
isdigit
(
ch
)
)
{
temp
.
push_back
(
ch
)
;
drop
(
)
;
ch
=
peek
(
)
;
}
tokens
.
push_back
(
std
:
:
move
(
temp
)
)
;
}
else
{
cout
<
<
"
not
match
"
<
<
(
int
)
ch
<
<
"
"
<
<
ch
<
<
endl
;
}
ch
=
peek
(
)
;
}
closeFileStream
(
)
;
for
(
auto
&
i
:
tokens
)
{
cout
<
<
i
<
<
endl
;
}
}
private
:
void
init
(
const
std
:
:
string
&
in
,
const
std
:
:
string
&
out
)
{
this
-
>
errorCount
=
0
;
openFile
(
in
,
out
)
;
}
void
openFile
(
const
std
:
:
string
&
in
,
const
std
:
:
string
&
out
)
{
inf
.
open
(
in
)
;
outf
.
open
(
out
)
;
}
void
closeFileStream
(
)
{
inf
.
close
(
)
;
outf
.
close
(
)
;
}
bool
isFileStreamAviliable
(
)
const
{
return
inf
&
&
outf
;
}
char
peek
(
)
{
return
inf
.
peek
(
)
;
}
void
drop
(
)
{
inf
.
get
(
)
;
}
int
errorCount
;
std
:
:
vector
<
std
:
:
string
>
tokens
;
std
:
:
ifstream
inf
;
std
:
:
ofstream
outf
;
}
;
int
main
(
)
{
Scanner
scanner
;
scanner
.
scan
(
"
in
.
txt
"
,
"
out
.
txt
"
)
;
system
(
"
pause
"
)
;
}
